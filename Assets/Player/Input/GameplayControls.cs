//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Player/Input/GameplayControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameplayControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameplayControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameplayControls"",
    ""maps"": [
        {
            ""name"": ""Motion"",
            ""id"": ""62391c9f-9523-4c38-99ce-f484e7cf3573"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""03bffe1e-bfe4-4f9c-a166-ee04025faad2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""01d9cf1f-7a41-4e60-a40f-5a80f444d2b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""cc257a77-6b49-4ec7-be73-44bcf52c3555"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a8bb03c7-0ec3-4a20-982a-e4e65de82912"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""81db3f86-3fbd-46d6-9643-e81b90a1d2e6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ebbe9c20-179d-4eae-b6c7-8b976db56df0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseN'Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""157459e6-5834-4470-bc07-ec1ff75fc5f5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseN'Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7ef06730-fccf-48db-9dab-4eca0a61a089"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseN'Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0d3b7d51-81b4-40f0-8af5-aea1ae1121ac"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseN'Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e4bb453c-f376-4c67-9592-887946f197a0"",
                    ""path"": ""<Mouse>/forwardButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d9230ba-45ff-43c0-b921-57fba6a636a2"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""002f91fe-c592-4995-b4c3-1d4c4dd90c41"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0a96c1a-186d-419e-9d7d-28f1bd5c53cf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gunplay"",
            ""id"": ""6c874ab5-b8ce-4fe0-8f62-428699a947b0"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""e84291ec-285d-4889-8df4-8aa7104e0998"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d62a415-cbe2-471d-aa32-94a7f52ba5d7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseN'Keyboard"",
            ""bindingGroup"": ""MouseN'Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Motion
        m_Motion = asset.FindActionMap("Motion", throwIfNotFound: true);
        m_Motion_Move = m_Motion.FindAction("Move", throwIfNotFound: true);
        m_Motion_Crouch = m_Motion.FindAction("Crouch", throwIfNotFound: true);
        m_Motion_Look = m_Motion.FindAction("Look", throwIfNotFound: true);
        m_Motion_Jump = m_Motion.FindAction("Jump", throwIfNotFound: true);
        // Gunplay
        m_Gunplay = asset.FindActionMap("Gunplay", throwIfNotFound: true);
        m_Gunplay_Fire = m_Gunplay.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Motion
    private readonly InputActionMap m_Motion;
    private List<IMotionActions> m_MotionActionsCallbackInterfaces = new List<IMotionActions>();
    private readonly InputAction m_Motion_Move;
    private readonly InputAction m_Motion_Crouch;
    private readonly InputAction m_Motion_Look;
    private readonly InputAction m_Motion_Jump;
    public struct MotionActions
    {
        private @GameplayControls m_Wrapper;
        public MotionActions(@GameplayControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Motion_Move;
        public InputAction @Crouch => m_Wrapper.m_Motion_Crouch;
        public InputAction @Look => m_Wrapper.m_Motion_Look;
        public InputAction @Jump => m_Wrapper.m_Motion_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Motion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MotionActions set) { return set.Get(); }
        public void AddCallbacks(IMotionActions instance)
        {
            if (instance == null || m_Wrapper.m_MotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MotionActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IMotionActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IMotionActions instance)
        {
            if (m_Wrapper.m_MotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMotionActions instance)
        {
            foreach (var item in m_Wrapper.m_MotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MotionActions @Motion => new MotionActions(this);

    // Gunplay
    private readonly InputActionMap m_Gunplay;
    private List<IGunplayActions> m_GunplayActionsCallbackInterfaces = new List<IGunplayActions>();
    private readonly InputAction m_Gunplay_Fire;
    public struct GunplayActions
    {
        private @GameplayControls m_Wrapper;
        public GunplayActions(@GameplayControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_Gunplay_Fire;
        public InputActionMap Get() { return m_Wrapper.m_Gunplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GunplayActions set) { return set.Get(); }
        public void AddCallbacks(IGunplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GunplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GunplayActionsCallbackInterfaces.Add(instance);
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IGunplayActions instance)
        {
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IGunplayActions instance)
        {
            if (m_Wrapper.m_GunplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGunplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GunplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GunplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GunplayActions @Gunplay => new GunplayActions(this);
    private int m_MouseNKeyboardSchemeIndex = -1;
    public InputControlScheme MouseNKeyboardScheme
    {
        get
        {
            if (m_MouseNKeyboardSchemeIndex == -1) m_MouseNKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseN'Keyboard");
            return asset.controlSchemes[m_MouseNKeyboardSchemeIndex];
        }
    }
    public interface IMotionActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IGunplayActions
    {
        void OnFire(InputAction.CallbackContext context);
    }
}
